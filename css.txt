- CSS adds style to a HTML page.
CSS is made up of various rules. These rules are made up of a selector and a semi-colon separated list of declarations.
Each of these declarations are made up of a property:value pair.
Syntax : Selector { Property: value; } 
NB: A selector can have many property and value pairs. They are usually separated by a semi-colon (;)
NB: A <div> is a HTML element. It is an empty container.
Selector - It is the first part of a CSS rule. Selectors tell the browser which HTML elements should be selected to have
certain CSS Properties and values applied to them. eg * { color: red; font-style: Sans-serif } - * is the selector, color  
and font-style are the Properties and red and Sans-serif are the values.

Types of selectors:
1. Universal selector
A universal selector will select all elements  except those with specified selectors set for them
eg * { color: red; } . All elements will have the color red.

2. Type selectors
A type selector is also known as an element selector. Type selectors select all elements of the given element type.
The syntax is the name of the element eg h2{ color: blue; }

3. Class selectors
syntax: .value of the class attribute eg .flowers{ color: green; } . The value of the class attribute is case-sensitive.
Class selectors will select all elements with the given class. 
class is an attribute placed inside a HTML element eg <p class="flowers"> Hello world! </p>
You can use the same class on as many elements as you like. This is because classes aren't required to be unique.
You can add multiple classes to an element as a space separated list ie <div class="flowers pots bees"></div>.
Since space is used to separate class names, you should never use it to separate multi-worded names and should use a
hyphen instead eg <div class="flower-pot honey-bees bees-wax"></div>

4.ID selectors
Syntax: #value of the class attribute eg #unique{ color: green; }. The value of the ID attribute is case-sensitive.
An ID is an attribute that you place inside a HTML element. eg <p id="cat">meow!</p>
ID selectors select an element with the given ID.
IDs should be used sparingly ie for specificity(more on this in a few) or when you have links redirecting to a section
on the current page.
An element can only have one ID ie they are unique. An ID cannot be repeated on any single page.
The ID attribute should not have any whitespace at all.

Grouping selector

To cut down on repetition, we can group selectors that have some common declarations as a coma separated list.
eg .read{ color: red; background-color: black; /* several unique declarations*/ ;}  
.unread{ color: red; background-color: black; /* several unique declarations*/ ;} 

grouping example : .read, .unread{ color:red; background-color:black;} .read{/* several unique declarations*/;} 
unread{/*several unique declarations*/;}
-Grouping reduces repetition of declarations and makes it easier to edit either the color or the background-color
of both classes at once.

Chaining selectors

Chaining selectors is useful when you want to apply  a certain rule to an element that has two or more specified
classes (which have their own unique declarations).
eg
<div>
  <div class="subsection header"</div>
  <p class="subsection preview">Hello world</p>
</div>

You can apply a certain CSS rule to an element that has both the subsection and preview  classes as follows:
.subsection.preview{ color: blue; } NB: There is no space between both classes (This is the syntax).
This syntax works for chaining any combination of selectors except type selectors eg h1p{} as there is no such 
HTML element.
It also works for chaining classes and IDs eg .subsection#flowers{ color: purple; }

Descendant combinators
Combinators show a relationship between selectors.
There are 4 combinators in total.
A descendant combinator is represented by a single space between selectors (The syntax is a space between selectors).
Its an ancestor and descendant kind of relationship ie child, parent, grandparent etc

eg <div class="doll">
     <div class="flower">
       <p class="heart-plants">I love plants!</p> <!-- The text will be green -->
       <p> plants are awesome!</p> <!-- The text will be purple -->
     </div>
   </div>
   <div class="doll"> <!-- Will have the declarations specified in the class (doll) applied -->
   </div>

.doll .flower{ color: green; }
.doll .flower .heart-plants{ color: purple; }
.doll{ /* several unique declarations*/ }

Avoid over-nesting to avoid confusion eg .doll .flower . heart-plants .cute-flower (etc) , as it might cause confusion.

CSS Properties
some terms to know:
A keyword is a closely related or associated word that is reserved by a program because, the word has a special 
meaning that defines commands and specific parameters for that code set.

Color and Background-color 
The color property sets an element's text-color. It accepts several values eg color : red; (a keyword) and 
HSL (Hueness, Saturation and Lightness color model), HEX(The values are a special code that represents color values 
from 0 to 255) and RGB color values. (red, green, blue color values).
You can adjust the opacity by adding an alpha value. eg RGBA OR HSLA eg rgba(255, 0, 0, 0.5) will be a transulucent red.

eg p{
  color: red;
  
  /* rgb example */
  color: rgb((255, 0, 0));
  
  /* HEX color code */
  color: #FF0000;
  
  /* hsl example */
  color: hsl(0, 100%, 50%);
}
background-color sets the background color of an element.

Typography basics and text-align

Font-family can be a single value or a comma-separated list of values that determine what font an element uses.
There are two categories of font :

1. Font-family names eg "Times New Roman". (We use quotes because of whitespaces between words)
2. Generic family names eg sans-serif . They do not use quotes
If a browser cannot find/ does not support the first font in a list, it will use the next one and so on until it finds
a supported and valid font.
It is best practice to include a list of values for this property, starting with the font that you want to be used most
and ending with a generic font-family as a fall back. eg font-family: "Times New Roman", sans-serif;

font-size sets the size of the font. The value should not contain any whitespaces eg font-size: 20px;
font-weight affects the boldness of text, assuming the font supports the specified weight. The value can be a keyword
eg font-weight: bold; or a number between 1-1000(inclusive) eg font-weight: 700;(the equivalent of bold)

text-align will align text horizontally within an element. eg text-align: center; . The values are keywords.

Image height and width
NB: images aren't the only elements that we can adjust the height and width on.
By default, an <img> element’s height and width values will be the same as the actual image file’s height and width.
auto(value for the height property) allows you to adjust the size of the image without causing it to lose it's proportions.
You just need to adjust width the width value. eg img{ height: auto; width: 500px;}

It’s best to include both of these properties for <img> elements, even if you don’t plan on adjusting the values 
from the image file’s original ones. When these values aren’t included, if an image takes longer to load than the 
rest of the page contents, the image won’t take up any space on the page at first, but will suddenly cause a drastic 
shift of the other page contents once it does load in. Explicitly stating a height and width prevents this from 
happening, as space will be “reserved” on the page and will just appear as a blank space until the image loads.

The cascade of CSS
Cascade refers to the fact that there is a hierarchy that is followed to determine which style is followed. 
The style rule or sheet that has the highest precedence is the one that is used.
CSS only does what we tell it to do. One exception to this is the default styles that are provided by a browser. 
These default styles vary from browser to browser.
The cascade is what determines which rules actually get applied to our HTML. 
There are different factors that the cascade uses to determine this.

1. specificity
A CSS declaration that is more specific will take precedence over less specific ones.
Inline styles, have the highest specificity compared to selectors.
Each type of selector has its own specificity level that contributes to how specific a declaration is.
ID selectors are the most specific selectors, followed by class selectors and then type selectors. A type selector will 
always beat any number of anything less specific than it.
Specificity will only be taken into account when an element has multiple, conflicting declarations targeting it, 
sort of like a tie-breaker.

1. If a rule has more class selectors then it will take precedence.
2. ID always beats class even though an element has more class selectors.
3. If both rules are using both ID and class selectors, then the cascade then checks the amount of each selector type.
The one with more selector types will take precedence.
NB: This only applies when an element has (a) conflicting declaration(s). A declaration will still be applied if
there is no conflicting declaration for it.
4. Combinators and the universal selector have no specificity.
5. The type selector has the lowest specificity value.

Inheritance
inheritance refers to certain CSS properties that, when applied to an element, are inherited by that element’s descendants,
even if we don’t explicitly write a rule for those descendants. Typography based properties (color, font-size, 
font-family, etc.) are usually inherited, while most other properties aren’t.
The exception to this is when directly targeting an element, as this always beats inheritance ie when an element has its
own declaration(s). This applies even if the parent element has a selector with a higher specificity. The child will
still have the specified style applied to it if the declaration directly targets it.

Rule order
Let’s say that after every other factor has been taken into account, there are still multiple conflicting rules 
targeting an element. How does the cascade determine which rule to apply? Whichever rule was the last defined is the winner.

Adding CSS to HTML

External CSS
It involves creating a separate file for the CSS and linking it inside of an HTML’s opening and closing <head> tags 
with a self-closing <link> element.
The href attribute is the location of the CSS file, either an absolute URL or a URL relative to the location of 
the HTML file. 
The rel attribute is required, and it specifies the relationship between the HTML file and the linked file.
Inside the CSS file with the file extension .css, we have declarations followed by curly braces which create a 
declaration block. we place any declarations inside of the declaration block. 
A note on file names, "style” or “styles” is most commonly used eg styles.css
pros to this method are:
1. It keeps our HTML and CSS separated, which results in the HTML file being smaller and making things look cleaner.
2. We only need to edit the CSS in one place, which is especially handy for websites with many pages that all 
share similar styles.

Internal CSS
Internal CSS (or embedded CSS) involves adding the CSS within the HTML file itself instead of creating a 
completely separate file.
you place all the rules inside of a pair of opening and closing <style> tags, which are then placed inside 
of the opening and closing <head> tags of your HTML file.
The syntax is exactly the same as the external method (selector, curly braces, declarations).
This method can be useful for adding unique styles to a single page of a website, but it doesn’t keep things 
separate like the external method, and depending on how many rules and declarations there are it can cause the 
HTML file to get pretty big.

Inline CSS
Inline CSS makes it possible to add styles directly to HTML elements, though this method isn’t as recommended.
We don’t actually use any selectors here, since the styles are being added directly to the element.
The style attribute is used inside the element with the declaration(s) as attribute values. eg 
<p style="color: red; background-color: blue;">Hello!</p>
If you need to add a unique style for a single element, this method can work just fine. 

Cons:
1. It can quickly become pretty messy once you start adding a lot of declarations to a single element, causing 
your HTML file to become unnecessarily bloated.
2. If you want many elements to have the same style, you would have to copy + paste the same style to each 
individual element, causing lots of unnecessary repetition and more bloat.
3. Any inline CSS will override the other two methods, which can cause unexpected results.
This can actually be taken advantage of.
